{"version":3,"sources":["images/pink_rice.png","components/Scores.js","components/Nav/Nav.js","components/Header/Header.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Scores","props","react_default","a","createElement","className","score","topScore","Nav","lib","s","guess","components_Scores","Header","xl","ClickCard","m","l","cardClasses","onClick","renderScore","id","src","image","alt","App","state","images","clickedId","randomizeCards","input","_this","i","length","randomIndex","Math","floor","random","itemAtIndex","console","log","setState","saveId","concat","Object","toConsumableArray","includes","_this2","this","Nav_Nav","fixed","Header_Header","pinkRice","map","Main","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f0f2f39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pink_rice.5f26da62.png\";","import React from \"react\";\r\n\r\nfunction Scores(props) {\r\n    return (\r\n        <div className=\"targetScore\">\r\n            <h5>Score: {props.score} | Top Score: {props.topScore}</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scores;","import React from \"react\";\r\nimport {Navbar,Row, Col} from \"react-materialize\";\r\nimport \"./style.css\"\r\nimport Scores from \"../Scores\"\r\n\r\nfunction Nav(props) {\r\nreturn(\r\n \r\n \r\n<div className=\"navbar-fixed\">\r\n<nav>\r\n<div >\r\n<Row>\r\n    <Col s={4}>\r\n        <h5 className=\"text\">Memory Game</h5>\r\n    </Col>\r\n    <Col s={4}>\r\n        <h5 className=\"text\">{props.guess}</h5>\r\n    </Col>\r\n    <Col s={4}>\r\n        <span className=\"text\"><Scores score={props.score} topScore={props.topScore}/></span>\r\n    </Col>\r\n</Row>\r\n</div>\r\n</nav>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport { Row, Col } from \"react-materialize\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xl={12} className=\"headCard\">\r\n                    {/* <img src={props.image} /> */}\r\n                    <div className=\"container\">\r\n                        <h1>Memory Click Game</h1>\r\n                        <h5>Click on an image to earn points, but don't forget what you've clicked. If you click an image a second time, you'll lose your points and have to start again.</h5>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {Col, CardPanel} from \"react-materialize\";\r\nimport \"./style.css\";\r\n\r\nfunction ClickCard(props) {\r\nreturn(\r\n\r\n    // <div className=\"container main\">\r\n    <Col s={6} m={4} l={3}>\r\n        <CardPanel className={props.cardClasses} onClick={() => props.renderScore(props.id)}>\r\n            <img src={props.image} alt=\"cartoon cat\"/>\r\n        </CardPanel>\r\n    </Col>\r\n    // </div>\r\n\r\n)\r\n}\r\n\r\nexport default ClickCard;","import React, { Component } from 'react';\nimport {Row} from \"react-materialize\"\nimport pinkRice from \"./images/pink_rice.png\"\nimport Nav from \"./components/Nav/Nav\"\nimport Header from \"./components/Header/Header\"\nimport ClickCard from \"./components/Main/Main\"\nimport images from \"./cardImage.json\";\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    images,\n    score: 0,\n    topScore: 0,\n    clickedId: [],\n    guess: \"Click an image to begin\",\n    cardClasses: \"clickCard hvr-grow-shadow\"\n  };\n\n  randomizeCards = () => {\n    var input = this.state.images;\n     \n    for (var i = input.length-1; i >=0; i--) {\n     \n        var randomIndex = Math.floor(Math.random()*(i+1)); \n        var itemAtIndex = input[randomIndex]; \n         \n        input[randomIndex] = input[i]; \n        input[i] = itemAtIndex;\n    }\n    console.log(input);\n    this.setState({images:input});\n  }\n\n  saveId = (id) => {\n    // let newClickArray = {...this.state.clickedId + this.image.id}\n    this.setState({clickedId: [...this.state.clickedId, id]})\n    console.log(\"clickedId array:\", this.state.clickedId)\n  }\n\n\n\n  renderScore = (id) => {\n    this.randomizeCards()\n\n    if(this.state.clickedId.includes(id)) {\n      this.setState({guess: \"You guessed incorrectly!\"})\n      this.setState({cardClasses: \"clickCard hvr-grow-shadow vibrate-3\"})\n      this.setState({score: 0})\n      this.setState({clickedId: []})\n    } else {\n      this.saveId(id)\n      this.setState({guess: \"You guessed correctly!\"})\n      this.setState({cardClasses: \"clickCard hvr-grow-shadow\"})\n      this.setState({score: this.state.score + 1})\n      this.setState({topScore: (this.state.topScore > this.state.score ? this.state.topScore : this.state.score + 1)})\n\n    }\n  }\n\n  render() {\n    return (\n      <div >\n      <Nav fixed={true} score={this.state.score} topScore={this.state.topScore}guess={this.state.guess}></Nav>\n      <Header image={pinkRice}>\n      </Header>\n      <Row>\n      <div className=\"container main\">\n        {\n          this.state.images.map(image => (\n            <ClickCard\n              id={image.id}\n              key={image.id}\n              image={image.image}\n              randomizeCards={this.randomizeCards}\n              renderScore={this.renderScore}\n              cardClasses={this.state.cardClasses}\n            />\n          ))\n          \n          \n        }\n        </div>\n      </Row>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}